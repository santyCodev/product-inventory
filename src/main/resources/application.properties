spring.application.name=gestorinventarioproductos

# Configuracion del Servidor Web (Puerto), El puerto en el que escuchara tu API
# El puerto en local es 8081 ya qu eel 8080 es de la aplicacion desplegada en docker
server.port=8081

# Configuracion de la Fuente de Datos (Datasource) para PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/inventory_db
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuracion de JPA/Hibernate (ORM)
    # 'update': Actualiza el esquema existente.
    # 'create': Crea el esquema cada vez (borra datos anteriores).
    # 'none': No hace nada (ideal para produccion con migraciones externas, si usas Flyway/Liquibase).
    # 'validate' en produccion despues de la configuracion inicial
    # Para desarrollo, 'update' es comodo.
spring.jpa.hibernate.ddl-auto=update
# Muestra las sentencias SQL que Hibernate ejecuta en la consola.
spring.jpa.show-sql=true
# Formatea el SQL para que sea mas legible en la consola.
spring.jpa.properties.hibernate.format_sql=true
# Dialecto de Hibernate para PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# JWT Configuration
app.jwtSecret=SuperSecretKeyForJWTAuthenticationInMyInventoryAppThatShouldBeVeryLongAndComplexForProductionUse
# 24 horas en milisegundos (24 * 60 * 60 * 1000)
app.jwtExpirationMs=86400000

# Logging
logging.level.org.springframework=DEBUG
# Ajusta 'com.example.inventory' a tu package base
logging.level.com.example.inventory=DEBUG
# Para ver las SQL queries
logging.level.org.hibernate.SQL=DEBUG
# Para ver los parametros de las queries
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Actuator (util para la Fase 5, pero bueno tenerlo desde el inicio)
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always

# Configuración de Redis
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Configuración adicional para el caché (opcional, pero recomendado)
# Define la duración por defecto del caché en segundos (ej. 1 hora)
#spring.cache.redis.time-to-live=3600000
# Prefijo para las claves de cache en Redis
#spring.cache.redis.key-prefix=inventory:
# Si quieres que las claves nulas sean cacheables
#spring.cache.redis.cache-null-values=true
# Define el serializer para los valores de la cache (ej. JSON)
# Esto es crucial para que los objetos se guarden y recuperen correctamente
#spring.cache.type=redis